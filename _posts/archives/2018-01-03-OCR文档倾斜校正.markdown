---
layout:     post
title:      "OCR文档倾斜校正"
subtitle:   " \"倾斜OCR文档的角度校正\""
date:       2018-01-03 21:17:00
author:     "HeShuai"
header-img: "img/banner/post-default.jpg"
catalog: true
tags:
    - 图像处理
    - OCR
---
<head>
    <script src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" type="text/javascript"></script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
            tex2jax: {
            skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],
            inlineMath: [['$','$']]
            }
        });
    </script>
</head>

# 倾斜校正算法总结

##### Abstract
调研和实现了四种倾斜校正算法，分别是傅里叶变换、Hough直线检测、$Radon$线性积分以及基于投射最小熵的倾斜矫正算法。在中文文本矫正中，效果与性能兼优的为基于投射最小熵的倾斜矫正算法。傅里叶变换和Hough校正算法不稳定，容易受背景或直线干扰影响， 且矫正精度不够。$Radon$由于积分原理，计算时间长，不适宜实时产品部署。
##### 1. Introduction
文本图像中一般文本行之间相互平行，每行之间的倾斜角度大致相近。可利用这一信息提取文本行的倾斜角度，作为图像的倾斜角度。文本行的倾斜角度提取方法主要有三种：傅里叶变换、直线检测与投影。对应的方法有傅里叶变换与Hough直线检测、$Radon$线性积分和一种基于垂直投影的最小熵角度检测。    上述矫正算法都可作为全局或者局部矫正算法。全局矫正算法假设所有行之间的倾斜角度一致，无视曲面变换、非线性变换的影响。在全局矫正的基础上，可以利用单行投影的方法，对单行文字行进行矫正。在全局或者全局与局部矫正结合的基础上，可以设计循环矫正算法。即通过全局或局部矫正循环，比较倾斜角度，当倾斜角度小于一定阈值，则终止矫正。一般来说，精度与处理时间大概成反比。    对于人眼而言，小于0.1的倾斜角度不容易察觉。对于字体切割程序而言，小于0.5的倾斜角度不影响切割结果。大于1°的角度误差人眼直观偏差较大。上述算法中，精度在1以下且泛化能力较强的只有基于投射最小熵的倾斜矫正算法。
##### 2. 倾斜矫正算法
###### 2.1 傅里叶变化与直线检测
傅里叶倾斜矫正算法为一种全局矫正算法，其基于文本图像倾斜角度一致的特点，对图像进行傅里叶变换。二维傅里叶变换可以看作二维正弦波的加权和，所以正弦波子成分的倾斜方向与文本的全局倾斜方向一致。正弦波子成分与横坐标的夹角可以通过实部频谱分析所得。[1]
![](https://raw.githubusercontent.com/mightycatty/image_bed/master/images/%E5%82%85%E9%87%8C%E5%8F%B6%E5%80%BE%E6%96%9C%E6%A0%A1%E6%AD%A3.png)
<center>P_0: 左图为原图，中间为平移到中心的频谱图，右图为结果图。从结果看FFT与原图之间的倾斜角度大致相同（仍然有较大偏差）</center>
傅里叶变换后得到中心移动的频谱图，从图中的直线可以获得文本图像的倾斜角度。下一部的算法则在$FFT$中进行直线检测。针对$FFT$图，有两种角度检测方式，一为通用的直线检测方法，如Hough等。另外利用$FFT$关于中心旋转对称的特定，可转化为极坐标，找极坐标中在角度轴上投射最大值对应的角度即为倾斜角度。**计算敏感如实际生产中建议采用极坐标转换法**。直线检测算法计算时间较长。

###### 2.2 Hough直线检测

Hough直线检测应用与文本矫正的原理在于文本图像中，文字行的重心近似在同一条直线上，且同行字间隔小。利用该特点，可以在文字行当中检测出直线。    实际算法实施中，计算出文本图像中所有直线的角度，排除一些特殊角度，如垂直的直线等。然后求平均，即为全局的文本图像倾斜角度。    Hough直线检测的缺点在于，由于中文的特殊构造，很多情况下文字中心并非在文字中心（往往偏下），导致检出出来的直线角度有下倾误差。该误差可以通过一定概率统计进行纠正。    由于Hough检测算法本身原理所致，运行时间较长。

###### 2.3 $Radon$线积分直线检测

$Radon$的原理为在图像中进行重复线积分，最终得到一个关于角度的$Radon$积分谱，在积分普中数值越大的角度越可能为直线。    实际算法实现中，往往取$Radon$积分谱中前一定阈值最大值所对应的角度求平均，作为全图的平均倾斜角度。    由于$Radon$的找直线的范围比Hough更大，同时取决与角度积分颗粒度，计算量非常大，往往一张1200*800的图像需要5s以上的时间，不适用于实时性要求高的应用场景。为降低计算两，往往对图像进行**下采样**。但是过度的下采样会牺牲精度。
###### 2.4 基于投影最小熵的直线检测
基于文本图像文本行近似平行与底边的特点，自己设计了一种按角度步长投影，取投影结果最小熵值所对应的投影角度作为最终矫正角度。
![](https://raw.githubusercontent.com/mightycatty/image_bed/master/images/%E5%80%BE%E6%96%9C%E6%A0%A1%E6%AD%A3-1.png)
<center>
    P_1: 投影示意图
</center>
由上图可见，当文本图像无倾斜角度时，横向投影的结果理想状态下应该近似突变函数。当文本有倾斜角度时，由于文本行像素倾斜分布到纵向轴上，导致投影后像素点发散分布。对比1、2情况可见，1情况的信息不确定性是最小的。因此将图像往不同方向旋转，再求横向投影的信息熵，最小信息熵者对应的旋转角度即为矫正角度。从结果看，基于最小信息熵的投射算法精度更高，同时计算时间（非刻意优化）在1200*800的图像中时间少至0.2s（$Radon$为8s）

##### 3. 算法延伸设计
上述算法都可用于全局矫正或局部矫正。全局矫正默认所有文字行的倾斜角度大概一致，对于局部变形严重的图像无能为力。为提高矫正精度，可采用先全局再局部的矫正方法。即先利用上述方法进行全局矫正，将矫正所得图像利用投影进行文字行分割，再对单行利用上述算法进行进一步的矫正。    除了全局矫正与局部矫正结合，还可以进行循环矫正。循环地进行角度检测与矫正，当检测结果大于一定精度要求，终止矫正，否则继续循环。    
##### 4. Summary

**倾斜校正效果：**

![](https://raw.githubusercontent.com/mightycatty/image_bed/master/images/%E5%80%BE%E6%96%9C%E6%A0%A1%E6%AD%A3-2.png)

![](https://raw.githubusercontent.com/mightycatty/image_bed/master/images/%E5%80%BE%E6%96%9C%E6%A0%A1%E6%AD%A3-3.png)

<center>
P_2: 有图为原图，作图顺时针分别为FFT\Hough\$Radon$\最小熵
</center>

从结果看，$FFT$偏差最大，其他三种方法结果均可接受，其中最小熵方法最优。运行时间(s)：

$$
\begin{align}
\notag
FFT&:0.0180 \\
\notag
Hough&:0.0049 \\
\notag
Radon&:3.3717\\
\notag
Min Entropy&:0.0240\\
\end{align}
$$

从运行时间看，霍夫最快，$Radon$最慢。

矫正精度：

$$
FFT <= HOUGH < radon < mini entropy
$$

运行时间：

$$
Hough < fft < mini entropy < rado
$$

##### 5.Referecne

[1] https://stackoverflow.com/questions/33698068/align-text-for-ocr